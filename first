import pygame
import random

GRID_SIZE = 20
SCREEN_WIDTH = 640
SCREEN_HEIGHT = 480
BOARD_BACKGROUND_COLOR = (0, 0, 0)


class GameObject:
    """Базовый класс для игровых объектов."""
    def __init__(self, position=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2), body_color=(0, 255, 0)):
        self.position = position
        self.body_color = body_color

    def draw(self, surface):
        """ Абстрактный метод для отрисовки объекта. """
        pass


class Apple(GameObject):
    """Класс для яблока."""
    def __init__(self):
        super().__init__()
        self.body_color = (255, 0, 0)
        self.randomize_position()

    def randomize_position(self):
        """Устанавливает случайную позицию яблока на игровом поле."""
        x = random.randint(0, (SCREEN_WIDTH // GRID_SIZE) - 1) * GRID_SIZE
        y = random.randint(0, (SCREEN_HEIGHT // GRID_SIZE) - 1) * GRID_SIZE
        self.position = (x, y)

    def draw(self, surface):
        """Отрисовывает яблоко на поверхности."""
        rect = pygame.Rect(self.position[0], self.position[1], GRID_SIZE, GRID_SIZE)
        pygame.draw.rect(surface, self.body_color, rect)


class Snake(GameObject):
    """Класс для змейки."""
    def __init__(self):
        super().__init__()
        self.length = 1
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        self.direction = (GRID_SIZE, 0)
        self.next_direction = None
        self.body_color = (0, 255, 0)
        self.last = None

    def get_head_position(self):
        """Возвращает позицию головы змейки."""
        return self.positions[0]

    def move(self):
        """Обновляет позицию змейки."""
        cur_head = self.get_head_position()
        dx, dy = self.direction
        new_x = (cur_head[0] + dx) % SCREEN_WIDTH
        new_y = (cur_head[1] + dy) % SCREEN_HEIGHT
        new_pos = (new_x, new_y)

        if new_pos in self.positions:
            self.reset()
        else:
            self.positions.insert(0, new_pos)
            if len(self.positions) > self.length:
                self.last = self.positions.pop()

    def reset(self):
        """Сбрасывает змейку в начальное состояние."""
        self.length = 1
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        directions = [(GRID_SIZE, 0), (-GRID_SIZE, 0), (0, -GRID_SIZE), (0, GRID_SIZE)]
        self.direction = random.choice(directions)
        self.last = None

    def update_direction(self):
        """Обновляет текущее направление движения змейки."""
        if self.next_direction:
            self.direction = self.next_direction
            self.next_direction = None

    def draw(self, surface):
        """Отрисовывает змейку и стирает след."""
        for pos in self.positions:
            rect = pygame.Rect(pos[0], pos[1], GRID_SIZE, GRID_SIZE)
            pygame.draw.rect(surface, self.body_color, rect)
        if self.last:
            rect = pygame.Rect(self.last[0], self.last[1], GRID_SIZE, GRID_SIZE)
            pygame.draw.rect(surface, BOARD_BACKGROUND_COLOR, rect)


def handle_keys(snake):
    """Обрабатывает нажатия клавиш для изменения направления змейки."""
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP] and snake.direction != (0, GRID_SIZE):
        snake.next_direction = (0, -GRID_SIZE)
    elif keys[pygame.K_DOWN] and snake.direction != (0, -GRID_SIZE):
        snake.next_direction = (0, GRID_SIZE)
    elif keys[pygame.K_LEFT] and snake.direction != (GRID_SIZE, 0):
        snake.next_direction = (-GRID_SIZE, 0)
    elif keys[pygame.K_RIGHT] and snake.direction != (-GRID_SIZE, 0):
        snake.next_direction = (GRID_SIZE, 0)


def main():
    """Основная функция игры."""
    pygame.init()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption('Змейка')
    clock = pygame.time.Clock()

    snake = Snake()
    apple = Apple()

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        handle_keys(snake)
        snake.update_direction()
        snake.move()

        if snake.get_head_position() == apple.position:
            snake.length += 1
            apple.randomize_position()

        screen.fill(BOARD_BACKGROUND_COLOR)
        snake.draw(screen)
        apple.draw(screen)

        pygame.display.update()
        clock.tick(20)

    pygame.quit()


if __name__ == "__main__":
    main()